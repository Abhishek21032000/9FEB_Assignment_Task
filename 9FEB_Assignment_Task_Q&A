{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3797a485-653e-48c8-9dee-189e914bd62e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generic Vehicle\n",
      "100\n",
      "10.0\n"
     ]
    }
   ],
   "source": [
    "\"\"\" Q1, Create a vehicle class with an init method having instance variables as name_of_vehicle, max_speed\n",
    "and average_of_vehicle. \"\"\"\n",
    "class Vehicle:\n",
    "    def __init__(self, name_of_vehicle, max_speed, average_of_vehicle):\n",
    "        self.name_of_vehicle = name_of_vehicle\n",
    "        self.max_speed = max_speed\n",
    "        self.average_of_vehicle = average_of_vehicle\n",
    "vehicle = Vehicle(\"Generic Vehicle\", 100, 10.0)\n",
    "print(vehicle.name_of_vehicle)  \n",
    "print(vehicle.max_speed)        \n",
    "print(vehicle.average_of_vehicle) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8681e594-b285-41f8-bf10-9143f3f8d72d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Toyota Camry has a seating capacity of 5 people\n"
     ]
    }
   ],
   "source": [
    "\"\"\" Q2. Create a child class car from the vehicle class created in Que 1, which will inherit the vehicle class.\n",
    "Create a method named seating_capacity which takes capacity as an argument and returns the name of\n",
    "the vehicle and its seating capacity. \"\"\"\n",
    "class Vehicle:\n",
    "    def __init__(self):\n",
    "        self.name_of_vehicle = None\n",
    "        self.max_speed = 0\n",
    "        self.average_of_vehicle = 0.0\n",
    "\n",
    "    def init(self, name_of_vehicle, max_speed, average_of_vehicle):\n",
    "        self.name_of_vehicle = name_of_vehicle\n",
    "        self.max_speed = max_speed\n",
    "        self.average_of_vehicle = average_of_vehicle\n",
    "\n",
    "class Car(Vehicle):\n",
    "    def seating_capacity(self, capacity):\n",
    "        return f\"{self.name_of_vehicle} has a seating capacity of {capacity} people\"\n",
    "\n",
    "vehicle = Vehicle()\n",
    "vehicle.init(\"Generic Vehicle\", 100, 10.0)\n",
    "car = Car()\n",
    "car.init(\"Toyota Camry\", 120, 15.0)\n",
    "print(car.seating_capacity(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "28ac8a5f-40bb-4e72-a8c2-495c3522fb66",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mammal sound\n"
     ]
    }
   ],
   "source": [
    "\"\"\" Q3. What is multiple inheritance? Write a python code to demonstrate multiple inheritance. \"\"\"\n",
    "\"\"\"   ANS:--> Multiple inheritance is a feature in object-oriented programming where a class can \n",
    "inherit from multiple parent classes. This means that a subclass can have the attributes and methods \n",
    "of multiple parent classes, allowing for greater code reusability and flexibility.\n",
    "Here's an example implementation of multiple inheritance in Python:\"\"\"\n",
    "\n",
    "class Animal:\n",
    "    def __init__(self, name):\n",
    "        self.name = name\n",
    "    \n",
    "    def speak(self):\n",
    "        raise NotImplementedError(\"Subclass must implement abstract method\")\n",
    "\n",
    "class Mammal(Animal):\n",
    "    def __init__(self, name):\n",
    "        super().__init__(name)\n",
    "    \n",
    "    def speak(self):\n",
    "        return \"Mammal sound\"\n",
    "\n",
    "class WingedAnimal(Animal):\n",
    "    def __init__(self, name):\n",
    "        super().__init__(name)\n",
    "    \n",
    "    def speak(self):\n",
    "        return \"Winged animal sound\"\n",
    "\n",
    "class Bat(Mammal, WingedAnimal):\n",
    "    def __init__(self, name):\n",
    "        super().__init__(name)\n",
    "\n",
    "bat = Bat(\"Batty\")\n",
    "print(bat.speak())  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fca5870f-1eb3-4342-9f93-5d77a3465320",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
